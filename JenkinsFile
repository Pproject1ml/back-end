pipeline {

    agent any

    environment{
        GIT_REPO = 'git@github.com:Pproject1ml/back-end.git'
        GIT_REPO_NAME = 'back-end'
        BRANCH = 'main'
        JENKINS_GIT_CLONE_PATH = '/var/jenkins_home/workspace/TT_Backend'

        DOCKER_REPO = 'teamonemg/tt-server'
        IMAGE_NAME = 'tt_server'

        HOST_SERVER = 'ubuntu@3.36.232.149'
        HOST_DOCKER_COMPOSE_PATH = '/home/ubuntu/tt/backend/'

        TEST_SERVER = 'ubuntu@3.37.171.121'
        TEST_PATH = '/home/ubuntu/test/'
    }

    triggers {
        // generic webhook trigger 설정
        GenericTrigger(

    	    //전역 변수로 활용할 값을 JSON에서 추출
    		genericVariables: [
    		    [key: 'version', value: '$.ref'],
    	        [key: 'ref_type', value: '$.ref_type']
    		],

            // GitHub Webhook에 설정한 토큰
            token: 'tt-server',

    		// branch 또는 tag 생성 시 실행
            causeString: 'Triggered on $ref_type creation: $version',
            regexpFilterText: '$ref_type',
    	    regexpFilterExpression: 'branch|tag',

            //콘솔 로그 출력 관련
            printContributedVariables: true,
            printPostContent: true
        )
    }

    stages {
        stage('Git Pull') {
            steps {
                sshagent(credentials:['forGithub']){
                    sh "git pull origin main"
                }
            }
        }

        stage('BE-Build') {
            steps {
                //dir("./${GIT_REPO_NAME}") {
                    sh "chmod +x ./gradlew "
                    sh "./gradlew clean build"
                //}
            }
        }

        stage('Create New Image') {
            steps {

                sh "docker buildx build -t ${IMAGE_NAME}:${env.version} ."
                echo "tag : ${env.version}"
                sh """
		            docker image tag ${IMAGE_NAME}:${env.version} ${DOCKER_REPO}:${env.version}
		            docker image tag ${IMAGE_NAME}:${env.version} ${DOCKER_REPO}:latest
		            docker push ${DOCKER_REPO}:${env.version}
		            docker push ${DOCKER_REPO}:latest
		        """
            }
        }
//운영 서버
//         stage('Deploy') {
//             steps {
//                 sshagent(credentials: ['forDevServer']) {
//                     sh """
//                         ssh ${HOST_SERVER} << EOF
//                         cd ${HOST_DOCKER_COMPOSE_PATH}
//                         docker compose down
//                         docker compose up -d
//                         docker image prune -f
//                     """
//                 }
//             }
//         }

//테스트 서버
        stage('Deploy') {
            steps {
                sshagent(credentials: ['forTestServer']) {
                    sh """
                        ssh ${TEST_SERVER} << EOF
                        cd ${TEST_PATH}
                        docker compose down
                        docker compose up -d
                        docker image prune -af
                    """
                }
            }
        }
    }
}